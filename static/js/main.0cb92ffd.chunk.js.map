{"version":3,"sources":["Constants/Color.js","Styling/PagesCSS.js","Styling/ComponentCSS.js","Components/PokemonCarousel.js","Components/Loading.js","Fixtures/PokemonData.js","Pages/HomePage.js","Pages/PokemonListPage.js","Utils/Utils.js","Pages/PokedexPage.js","Components/NameForm.js","Components/CatchModal.js","Pages/PokemonDetailPage.js","Components/Error.js","Components/TopBar.js","App.js","reportWebVitals.js","index.js"],"names":["GOLDEN_YELLOW","GREY_BLACK","BACKGROUND_COLOR","ELECTRIC_BLUE","TitleContainerCSS","css","HomePageCSS","PokemonCardsCSS","PokemonCardCarousel","PaginationContainer","PokemonListPageCSS","PokemonDetailPageCSS","ModalCSS","ReleaseConfirmationModalCSS","PokedexContainer","TopBarCSS","NavigationButtonCSS","ContainerGithubCSS","CarouselComponentCSS","ContainerPokeballCSS","LoadingCSS","NicknameFormCSS","PokemonCarousel","data","history","useHistory","autoplay","infinite","cellSpacing","slideWidth","map","val","className","name","toUpperCase","size","src","image","alt","onLoad","window","dispatchEvent","Event","onClick","push","pathname","Loading","PokemonData","sprites","front_default","types","type","moves","move","abilities","ability","pokemons","DetailedPokemonData","nickName","gender","pokemon","GET_POKEMONS","gql","gqlVariables","limit","offset","Math","floor","random","HomePage","useState","searchValue","setSearchValue","useQuery","variables","loading","error","message","pokemonData","results","placeholder","maxLength","onChange","value","defaultValue","onSubmit","toLowerCase","cancelText","Body","style","minHeight","ls","require","locale","prevText","nextText","PokemonListPage","setOffset","currentPage","setCurrentPage","ownedPokemon","get","modifiedPokemonData","object","count","tempResult","ownedPokemonDataWithCount","Object","values","item","ownedItem","hasLine","square","columnNum","renderItem","dataItem","height","verticalAlign","handlePokemonClick","total","current","changePage","checkType","checkBackgroundColor","backgroundColor","checkBackgroundColorPokedex","FIRST_TEXT","Item","PokedexPage","pokemonList","setPokemonList","deletedPokemon","setDeletedPokemon","isConfirmationModalOpen","setIsConfirmationModalOpen","nickname","wrap","index","disabled","level","weight","visible","transparent","modifiedPokemon","filter","set","length","remove","handleConfirmedRelease","NameForm","setVisible","pokedex","temp","formik","useFormik","initialValues","newPokemon","validate","errors","some","handleSubmit","id","handleChange","touched","CatchModal","chance","catchChance","setChance","isLoading","setIsLoading","loadingText","setLoadingText","handleLoading","handleOnClose","markClosable","afterClose","setTimeout","GET_POKEMONS_DETAIL","PokemonDetailPage","isCatchModalVisible","setIsCatchModalVisible","pokemonName","location","href","substring","lastIndexOf","Panel","header","Error","title","TopBar","width","target","rel","margin","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.0cb92ffd.chunk.js","sourcesContent":["export const GOLDEN_YELLOW = '#f0c44d'\nexport const GREY_BLACK = '#222224';\nexport const BACKGROUND_COLOR = '#e3e5dd';\nexport const ELECTRIC_BLUE = '#373F51';\nexport const NORMAL = '#A8A87A';\nexport const FIGHTING = '#BC3330';\nexport const FLYING = '#A791EE';\nexport const POISON = '#9D429F';\nexport const GROUND = '#DFC06D'\nexport const ROCK = '#B7A040';\nexport const BUG = '#A9B72D';\nexport const GHOST = '#6F5997';\nexport const STEEL = '#B8B8CF';\nexport const FIRE = '#EC813C';\nexport const WATER = '#6B91EE';\nexport const GRASS = '#7EC754';\nexport const ELECTRIC = '#F6D040';\nexport const PSYCHIC = '#F35B8A';\nexport const DRAGON = '#6E3DF5';\nexport const DARK = '#6F5849';\nexport const FAIRY = '#EB9AAD';\nexport const ICE = '#9cd8d7';\nexport const DEFAULT = '#6CA090';","import {css} from \"@emotion/react\";\nimport {BACKGROUND_COLOR, ELECTRIC_BLUE, GOLDEN_YELLOW, GREY_BLACK} from \"../Constants/Color\";\n\nexport const TitleContainerCSS = css`\n    background-color: ${GREY_BLACK};\n    margin-bottom:0;\n    h2 {\n        font-weight: 900;\n    }\n    height-min: 130px;\n`\n\nexport const HomePageCSS = css`\n    background-color: ${BACKGROUND_COLOR};\n    .searchbar {\n        width: 90vw;\n        max-width: 600px;\n        margin: auto;\n    }\n    width: 100%;\n    height: auto;\n    padding: 0;\n    margin: auto;\n    text-align: center;\n    h2 {\n        font-size: 2.2vh;\n        color:${GOLDEN_YELLOW};\n    }\n    .am-card{\n        border-bottom: 0px;\n        padding: 0;\n        border-style: none !important;\n    }\n    .am-card-body{\n        border-bottom: 0px;\n        border-style: none !important;\n    }\n    .card-carousel-container{\n        width: 90vw;\n        border-top: 10px;\n        max-width: 500px;\n        border-style: none;\n        margin: auto;\n    }\n`\n\nexport const PokemonCardsCSS = css`\n    padding-bottom: 5vh;\n    background-color: ${BACKGROUND_COLOR};\n    .empty-container{\n        margin: auto;\n        font-weight: bolder;\n        padding: 1vw;\n        h3 {\n            margin-bottom: auto;\n            font-size: 4vh;\n            color: ${BACKGROUND_COLOR};\n            font-weight: bolder;\n            -webkit-text-stroke: 2px ${GREY_BLACK};\n        }\n    }\n    .am-card-header {\n        font-size: 5vw;\n        width: 100%;\n        color: white;\n        border-radius: 10px;\n        background-color: ${GREY_BLACK};\n        max-width: 720px;\n        text-align: center;\n        border-style: none !important;\n        border: 0px;\n    }\n    .am-card-header-content{\n        color: #f2cc65;\n        border-style: none !important;\n        font-weight: bolder;\n        font-size: 0.7em;\n        margin: 0px;\n        text-align: center;\n        border-radius: 20px;\n        border-style: none;\n        border: 0px;\n    }\n    .pokemon-name{\n        font-weight: 900;\n        font-size: 4vh;\n        margin-top: 0;\n        max-width: 720px;\n        color: ${BACKGROUND_COLOR};\n    }\n    .catch-pokemon-button-container{\n        width: 100%;\n        margin: auto;\n        text-align: center;\n        .catch-pokemon-button{\n            background-color: ${GREY_BLACK};\n            width: 70vw;\n            padding: 0px 1vw 0px 1vw;\n            color: ${GOLDEN_YELLOW};\n            max-width: 720px;\n            text-align: center;\n            margin-right: 1vw;\n            display: inline-block;\n            font-size: 1.4vh;\n            font-weight: bold;\n            border-style: none;\n        }\n    }\n    .card-container{\n        width: 72vw;\n        margin: auto;\n        max-width: 720px;\n    }\n    .pokemon-image-container{\n        background-image: url('/images/2gfwG.jpg');\n        border-radius: 15px;\n        text-align: center;\n        align-items: center;\n        width: 100%;\n        max-height: 614px;\n    }\n    .pokemon-detail-container{\n        text-align: left;\n        max-width: 850px;\n    }\n    .pokemon-detail-type-container{\n        text-align: center;\n        width: auto;\n        max-width: 850px;\n        Span {\n            width: auto;\n        }\n        .am-button-disabled {\n            color: white;\n        }\n    }\n    .pokemon-image{\n        width: 50vh;\n        max-width: 80%;\n    }\n    .am-card {\n        border-radius: 2vh;\n        margin: auto;\n        background-color: ${ELECTRIC_BLUE};\n        border-style: ridge;\n        border-color: blue;\n        border-width: 1vw;\n        border-color: ${GREY_BLACK};\n        width: 90%;\n        height: auto;\n        max-width: 850px;\n    }\n    .accordion-content{\n        text-align: center;\n        font-weight: 700;\n    }\n    .am-accordion-content-box{\n        background-color: ${ELECTRIC_BLUE};\n        border-style: none !important;\n        border: none !important;\n        border-top: none !important;\n        padding: 10px 0px 10px 0px;\n        :after{\n            background-color: ${ELECTRIC_BLUE} !important;\n        }\n    }\n    .am-accordion-header{\n        background-color: ${BACKGROUND_COLOR} !important;\n        padding: 0px !important;\n        border-style: 10px !important;\n    }\n    .subtitle{\n        background-color: ${BACKGROUND_COLOR};\n        text-align: center;\n        font-weight: 700;\n        font-size: 150%;\n        height: 20%;\n    }\n    .am-card-body {\n        :before {\n            background-color: ${ELECTRIC_BLUE} !important;\n        }\n        padding: 0px;\n        max-width: 850px;\n        background-color: ${ELECTRIC_BLUE};\n    }\n    .move-container{        \n        display: flex;\n        opacity: 1 !important;\n        align-items: center;\n        background-color: ${BACKGROUND_COLOR};\n        color: ${GREY_BLACK};\n        width: 10.5vh;\n        min-width: 60px;\n        max-width: 250px;\n        margin-right: 1vw;\n        display: inline-block;\n        border-radius: 10px;\n        padding: 0;\n        p{\n            font-weight: bold;\n            font-size: 1vh;\n            word-break: break-word;\n            overflow: auto;\n        }\n    }\n`\n\nexport const PokemonCardCarousel = css`\n    .am-card-body{\n        width: 100%;\n        min-height: 50vh;\n        background-color: ${BACKGROUND_COLOR};\n    }\n`\n\nexport const PaginationContainer = css`\n    min-height: 70vh;\n    background-color: ${BACKGROUND_COLOR};\n    .am-card-body {\n        background-color: ${BACKGROUND_COLOR};\n        width: 100%;\n        border-style: none;\n        max-width: 850px;\n        margin: auto;\n    }\n    .am-grid-item{\n        border-style: none;\n        background-color: ${BACKGROUND_COLOR};\n        width: 20%;\n    }\n    .grid-container{\n        margin: auto;\n        text-align: center;\n        min-height: 20%;\n    }\n    .content-container{\n        overflow: hidden;\n    }\n    h5{\n        align-text: center;\n        font-size: 90%;\n        font-weight: bold;\n        color: ${GOLDEN_YELLOW};\n        background-color: ${GREY_BLACK};\n    }\n    .owned-amount{\n        align-text: center;\n        font-size: 70%;\n        font-weight: normal;\n        color: ${GOLDEN_YELLOW};\n        background-color: ${GREY_BLACK};\n    }\n    img {\n        width: 100%;\n        min-height: 20%;\n    }\n    .am-card {\n        padding: 0px;\n    }\n    .am-button {\n        background-color: ${GREY_BLACK};\n        color: ${GOLDEN_YELLOW};\n    }\n`\n\nexport const PokemonListPageCSS = css`\n    height-min: 130px;\n    background-color: ${BACKGROUND_COLOR};\n    text-align: center;\n    margin: 0px;\n    Span{\n        font-weight: bold;\n    }\n    .pokemon-list-title {\n        background-color: ${GREY_BLACK};\n        h2 {\n            font-size: 2.2vh;\n            font-weight:900;\n            color:${GOLDEN_YELLOW};\n        }\n    }\n`\n\nexport const PokemonDetailPageCSS = css`\n    height-min: 130px;\n    background-color: ${BACKGROUND_COLOR};\n    text-align: center;\n    margin: 0px;\n    Span{\n        font-weight: bold;\n    }\n    .pokemon-list-title {\n        background-color: ${GREY_BLACK};\n        h2 {\n            font-size: 2.2vh;\n            font-weight:900;\n            color:${GOLDEN_YELLOW};\n        }\n    }\n`\n\nexport const ModalCSS = css`\n    max-width: 800px;\n    margin-bottom: 100px;\n    .am-modal-transparent{\n        width: 20vh;\n    }\n    .am-modal-header:{\n        font-weight: bold;\n        border-radius: 10px;\n    }\n    h2{\n        background-color: ${GREY_BLACK};\n        color: ${GOLDEN_YELLOW};\n        font-weight: bolder;\n    }\n    .loading-catch-text{\n        h1{\n            background-color: ${GREY_BLACK};\n            color: ${GOLDEN_YELLOW};\n            font-weight: bolder;\n        }\n        background-color: ${ELECTRIC_BLUE};\n        padding: 2vh 0 5px 0;\n    }\n    .pokemon-image{\n        width: 50vw;\n        max-width: 300px;\n        background-image: url('/images/2gfwG.jpg');\n    }\n    .am-modal-content: {\n        background-color: ${ELECTRIC_BLUE};\n        padding-top: 0px !important;\n    }\n    .successful-catch-container{\n        background-color: ${ELECTRIC_BLUE};\n        h3{\n            font-size: 2.6vw;\n            font-weight: bold;\n            background-color: ${ELECTRIC_BLUE};\n            color: white;\n        }\n        h2{\n            font-size: 2.8vh;\n        }\n    }\n    .container{\n        text-align: center;\n        width: 100%;\n        display: inline-block;\n    }\n    .am-button{\n        margin: auto;\n        width: 40%;\n        display: inline-block;\n        color: ${GOLDEN_YELLOW};\n        background-color: ${GREY_BLACK};\n        border-color: ${GOLDEN_YELLOW};\n    }\n    .failed-catch-container{\n        h1{\n            color: ${GOLDEN_YELLOW};\n            font-weight: bolder;\n        }\n        background-color: ${ELECTRIC_BLUE};\n        padding: 0 0 10px 0;\n    }\n    .failed-catch-text{\n        background-color: ${GREY_BLACK};\n        width: 100%;\n        padding: 10px;\n    }\n    .button-container{\n        display: flex;\n        justify-content: space-between;\n        font-weight: bold;\n    }\n    width: 80vw;\n    text-align: center;\n    .button-retry{\n        color: ${GOLDEN_YELLOW};\n        background-color: ${GREY_BLACK};\n    }\n`\n\nexport const ReleaseConfirmationModalCSS = css`\n    .confirmation-modal-container{\n        h2{\n            color: ${GOLDEN_YELLOW};\n        }\n        background-color: ${ELECTRIC_BLUE};\n        padding: 0 0 10px 0;\n        h1{\n            font-weight: bolder;\n        }\n    }\n    .button-container{\n        display: flex;\n        justify-content: space-between;\n        font-weight: bold;\n    }\n    .confirmation-modal-text{\n        background-color: ${GREY_BLACK};\n        width: 100%;\n        padding: 10px;\n    }\n    .am-modal-transparent{\n        width: 20vh;\n    }\n    width: 80vw;\n    text-align: center;\n    max-width: 300px;\n    margin-bottom: 100px;\n    .am-modal-header:{\n        font-weight: bold;\n        border-radius: 10px;\n    }\n    .am-button{\n        margin: auto;\n        width: 40%;\n        display: inline-block;\n        color: ${GOLDEN_YELLOW};\n        background-color: ${GREY_BLACK};\n    }\n`\n\nexport const PokedexContainer = css`\n    padding-bottom: 5vh;\n    background-color: ${BACKGROUND_COLOR};\n    .am-card-header {\n        font-size: 1.4vh;\n        text-align: center;\n        font-weight: bolder;\n        text-align: center;\n        width: 100%;\n        color: white;\n        background-color: ${GREY_BLACK};\n        border-style: none;\n        border: 0px;\n    }\n    .am-card-header-content{\n        text-align: center;\n        font-weight: bolder;\n        color: ${GOLDEN_YELLOW};\n        margin-bottom: 0;\n    }\n    .am-card {\n        text-align: center;\n        border-radius: 2vh;\n        margin: auto;\n        background-color: ${ELECTRIC_BLUE};\n        border-style: ridge;\n        border-color: blue;\n        border-width: 1vw;\n        border-color: ${GOLDEN_YELLOW};\n        width: 90%;\n        height: auto;\n        max-width: 850px;\n    }\n    .am-card-body {\n        padding: 0px;\n        max-width: 850px;\n        border-style: none;\n    }\n    .empty-container{\n        margin: auto;\n        font-weight: bolder;\n        padding: 1vw;\n        h3 {\n            margin-bottom: auto;\n            font-size: 4vh;\n            color: ${BACKGROUND_COLOR};\n            font-weight: bolder;\n            -webkit-text-stroke: 2px ${GREY_BLACK};\n        }\n    }\n    .am-list-body{\n        border-radius: 5px;\n        background-color: ${ELECTRIC_BLUE};\n    }\n    .am-list{\n        border-radius: 5px;\n        background-color: ${ELECTRIC_BLUE};\n    }\n    .am-list-line-wrap{\n        border-style: none;\n        background-color: ${ELECTRIC_BLUE};\n        border-color: ${ELECTRIC_BLUE} !important;\n    }\n    .am-list-item {\n        background-color: ${ELECTRIC_BLUE};\n    }\n    .am-list-line-wrap{\n        :after{\n            background-color: ${ELECTRIC_BLUE} !important;\n        }\n    }\n    .am-list-body{\n        background-color: ${ELECTRIC_BLUE};\n        border-style: none;\n    }\n    .am-list-item-middle{\n        border-style: none;\n        padding-left: 2vw;\n    }\n    .am-list-line-wrap{\n        padding-right: 0px !important;\n    }\n    .whitespace{\n        background-color: ${GOLDEN_YELLOW};\n    }\n    .pokedex-image {\n        margin: auto;\n        width: 25vw;\n        max-width: 250px;\n        display: inline-block;\n        float: left;\n        padding-top: 1.2%;\n        img {\n            width: 100%;\n            max-width: 250px;\n            height: auto;\n            min-height: 100%;\n            border-radius: 5px;\n            background-image: url('/images/2gfwG.jpg');\n        }\n    }\n    .pokedex-info-container{\n        float: left;\n        padding-top: 1%;\n        padding-left: 2vw;\n        width: 45vw;\n        max-width: 300px;\n        display: inline-block;\n        .pokedex-info{\n            background-color: ${GREY_BLACK};\n            padding: 1%;\n            border-radius: 5px;\n            h4{\n                color: ${BACKGROUND_COLOR};\n                font-weight: bolder;\n                font-size: 1.3vh;\n            }\n            .pokedex-info-left{\n                display: inline-block;\n                width: 40%;\n                min-width: 54.3px;\n            }\n            .pokedex-info-right{\n                display: inline-block;\n                width: 60%;\n                min-width: 81.3px;\n            }\n        }\n        h4{\n            color: ${BACKGROUND_COLOR};\n            font-weight: bolder;\n            font-size: 1.3vh;\n            margin-bottom: 0px;\n        }\n    }\n    .pokedex-release-button{\n        float: right;\n        width: 10vw;\n        max-width: 100px;\n        padding-right: 1%;\n        display: inline-block;\n        .am-button {\n            padding: 0px;\n            width: auto;\n            border-color: black;\n            font-weight: bolder;\n            font-size: 1vh;\n            background-color: #E91916;\n        }\n    }\n    .am-button-disabled {\n        color: white;\n    }\n    .abilities-container{\n        margin-top: 0;\n        width: 100%;\n    }\n    .abilities-button{\n        opacity: 1 !important;\n        width: 40%;\n        max-width: 100px;\n        margin-top: 2%;\n        color: ${GREY_BLACK};\n        padding: 0;\n        text-align: center;\n        margin-right: 5%;\n        display: inline-block;\n        font-size: 1vh;\n        font-weight: bold;\n        border-style: none;\n    }\n    .pokedex-types{\n        vertical-align: bottom;\n        height: 100%;\n    }\n`","import {css} from \"@emotion/react\";\nimport {BACKGROUND_COLOR, ELECTRIC_BLUE, GOLDEN_YELLOW, GREY_BLACK} from \"../Constants/Color\";\n\nexport const TopBarCSS = css`\n    color: black;\n    width: 100%;\n    border: 0px;\n    padding: auto;\n    min-width: 200px;\n    height: auto;\n    text-align: center;\n    background-image: linear-gradient(75deg, #bd4949, #7b2916);\n`\n\nexport const NavigationButtonCSS = css`\n     padding: 10vh 0 10vh 0;\n     border: auto;\n     display: inline-block;\n     min-width: 60px;\n     a {\n         background-color: ${GREY_BLACK};\n         border-radius: 2vh;\n         border-color: ${GOLDEN_YELLOW};\n         border-style: solid;\n         border-width: 1px;\n         color: ${GOLDEN_YELLOW};\n         padding: 2.5vh;\n         font-weight: bold;\n         font-size: 1.2vh;\n     }\n`\n\nexport const ContainerGithubCSS = css`\n    padding: 5vh 0 2vh 0;\n    text-align: center;\n    a {\n        background-color: ${GREY_BLACK};\n        border-radius: 2vh;\n        border-color: ${GOLDEN_YELLOW};\n        border-style: solid;\n        border-width: 1px;\n        color: ${GOLDEN_YELLOW};\n        padding: 2.5vh;\n        font-weight: bold;\n        font-size: 1.8vh;\n    }\n`\n\nexport const CarouselComponentCSS = css`\n    width: 100%;\n    text-align: center\n    .carousel-container{\n        textAlign: center\n    }\n    .pokemon-name-header{\n        background-color: ${GREY_BLACK};\n        width: 110%\n    }\n    .pokemon-name{\n        color: ${GOLDEN_YELLOW};\n        font-size: 2.7vh;\n        width: 100%;\n        padding-right: 9%;\n    }\n    .am-carousel-wrap{\n        margin-top: 100px important!;\n    }\n    img{\n        height: 25vh;\n        vertical-align: top;\n        padding-right:2%;\n    }\n`\n\nexport const ContainerPokeballCSS = css`\n    width: 100%;\n    padding: 6vh 0 2vh 0;\n    img {\n        display: block;\n        margin-left: auto;\n        margin-right: auto;\n    }\n    h2{\n        text-align: center;\n        font-style: italic;\n        font-weight: bold;\n        font-size: 6.5vh;\n        padding-top: 5vh;\n        margin: auto;\n        color: ${GOLDEN_YELLOW};\n        font-family: Verdana, sans-serif;\n    }\n`\n\nexport const LoadingCSS = css`\n   margin-top: 5%;\n   margin-bottom: 5%;\n   text-align: center;\n   border-radius: 4px;\n   width: 100%;\n`\n\nexport const NicknameFormCSS = css`\n    background-color: ${GREY_BLACK};\n    h4{\n        color: ${GOLDEN_YELLOW};\n        font-weight: bold;\n    }\n    .form-container{\n        margin: auto;\n        .input-container{\n            display: inline-block;\n            width: 70%;\n            min-width: 140px;\n            border: 0x;\n            margin: auto;\n            .input-nickname{\n                min-height: 30px;\n                margin-bottom: 0.5%;\n                float: right;\n                padding-left: 3%;\n                width: 100%;\n                border-radius: 4px;\n                border-style: solid;\n            }\n        }\n        .input-submit-container{\n            display: inline-block;\n            width: auto;\n            margin: 0 0 0 1%;\n            .submit-button{\n                min-width: 40px;\n                width: 100%;\n                float: left;\n                margin-bottom: 4% !important;\n                border-color: ${ELECTRIC_BLUE} !important;\n                background-color: ${ELECTRIC_BLUE};\n                padding: 0 1% 0 1%;\n                p{\n                    color: ${BACKGROUND_COLOR};\n                    margin-bottom: 0;\n                    font-size: 1.2vh;\n                    font-weight: bold;\n                }\n            }\n        }\n    }\n    .error-message{\n        margin-top: 0.2em;\n        color: red;\n    }\n`\n","/** @jsxImportSource @emotion/react */\n\nimport React from \"react\";\nimport {Carousel, WhiteSpace, WingBlank} from \"antd-mobile\";\nimport {CarouselComponentCSS} from '../Styling/ComponentCSS'\nimport {useHistory} from 'react-router-dom';\n\nexport const PokemonCarousel = (data) => {\n    const history = useHistory();\n\n    const handleListClick =  (name) => {\n        history.push({\n            pathname: `/pokemon-detail/${name}`\n        });\n    }\n\n    return(\n        <div css={CarouselComponentCSS}>\n            <WingBlank>\n                <Carousel\n                    autoplay={false}\n                    infinite\n                    cellSpacing={10}\n                    slideWidth={1}\n                >\n                    {data.data.map(val => (\n                        <div className='carousel-container'>\n                            <div className='pokemon-name-header'>\n                                <h4 className='pokemon-name'>{(val.name).toUpperCase()}</h4>\n                            </div>\n                            <WhiteSpace size='xl'/>\n                            <img\n                                src={val.image}\n                                alt={val.name}\n                                onLoad={() => {\n                                    window.dispatchEvent(new Event('resize'));\n                                }}\n                                onClick={() => handleListClick(val.name)}\n                            />\n                        </div>\n                    ))}\n                </Carousel>\n            </WingBlank>\n        </div>\n    )\n}","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport Spin from 'antd/es/spin';\nimport 'antd/es/spin/style/css';\nimport {LoadingCSS} from \"../Styling/ComponentCSS\";\n\nexport const Loading =  () => {\n    return (\n        <div css={LoadingCSS}>\n            <Spin size='large'/>\n        </div>\n    );\n}","export const PokemonData = [\n    {\n        name: 'pokemon',\n        image: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png',\n        sprites: {\n            front_default: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png'\n        },\n        types: [\n            {\n                type: {\n                    name: 'abc'\n                }\n            }\n        ],\n        moves: [\n            {\n                move: {\n                    name: 'abc'\n                }\n            }\n        ],\n        abilities: [\n            {\n                ability: {\n                    name: 'abc'\n                }\n            }\n        ]\n    },\n    {\n        name: 'pokemon',\n        image: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png'\n    },\n    {\n        name: 'pokemon',\n        image: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png',\n        pokemons: 'abc'\n    },\n];\n\nexport const DetailedPokemonData = {\n    name: 'Pokemon',\n    sprites: {\n        front_default: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png'\n    },\n    nickName: 'Bulb',\n    types: [\n        {\n            type:{\n                name: 'abc'\n            }\n        }\n    ],\n    gender: 'Male',\n    moves: [\n        {\n            move: {\n                name: 'abc'\n            }\n        }\n    ],\n    abilities: [\n        {\n            ability: {\n                name: 'abc'\n            }\n        }\n    ],\n    pokemon: {\n        name: 'pokemon'\n    }\n};","/** @jsxImportSource @emotion/react */\n\nimport React, {useState} from 'react';\nimport {WhiteSpace, Card, WingBlank, SearchBar} from \"antd-mobile\";\nimport { HomePageCSS, TitleContainerCSS, PokemonCardCarousel} from '../Styling/PagesCSS'\nimport {PokemonCarousel} from \"../Components/PokemonCarousel\";\nimport { gql, useQuery } from '@apollo/client';\nimport {Loading} from \"../Components/Loading\";\nimport {PokemonData} from '../Fixtures/PokemonData';\nimport {useHistory} from 'react-router-dom';\n\nconst GET_POKEMONS = gql`\n  query pokemons($limit: Int, $offset: Int) {\n    pokemons(limit: $limit, offset: $offset) {\n      results {\n        id\n        url\n        name\n        image\n      }\n    }\n  }\n`;\n\nconst gqlVariables = {\n    limit: 10,\n    offset: Math.floor((Math.random() * 1108) + 1)\n};\n\nexport const HomePage = () => {\n    const [searchValue, setSearchValue] = useState('');\n\n    const history = useHistory();\n\n    const { loading, error, data } = useQuery(GET_POKEMONS, {\n        variables: gqlVariables,\n    });\n\n    if (error) return `Error! ${error.message}`;\n\n    let pokemonData = PokemonData;\n\n    if (!loading) pokemonData = data.pokemons.results;\n\n    const onChange = (value) => {\n        setSearchValue(value)\n    }\n\n    const onSubmit = (value) => {\n        history.push(`/pokemon-detail/${value.toLowerCase()}`);\n    }\n\n    return (\n        <div>\n            <div css={HomePageCSS}>\n                <div css={TitleContainerCSS}>\n                    <WhiteSpace size='xl'/>\n                    <h2>RANDOM POKEMONS OF THE DAY</h2>\n                    <WhiteSpace size='xl'/>\n                </div>\n                <WhiteSpace size='xl'/>\n                <WingBlank size='lg'>\n                    <div className='searchbar'>\n                        <SearchBar\n                            placeholder='Search Pokemon'\n                            maxLength='20'\n                            onChange={onChange}\n                            defaultValue={searchValue}\n                            onSubmit={(searchValue) => onSubmit(searchValue)}\n                            cancelText='Cancel'\n                        />\n                    </div>\n                </WingBlank>\n                <WhiteSpace size='xl'/>\n                <div className='card-carousel-container'>\n                    <WingBlank>\n                        <div css={PokemonCardCarousel}>\n                            <Card>\n                                <Card.Body>\n                                    {loading ?\n                                        <div style={{minHeight: '30vh'}}><Loading /></div>\n                                        :\n                                        <PokemonCarousel data={pokemonData}/>\n                                    }\n                                </Card.Body>\n                            </Card>\n                        </div>\n                    </WingBlank>\n                </div>\n            </div>\n        </div>\n    );\n}\n","/** @jsxImportSource @emotion/react */\n\nimport React, {useState} from 'react';\nimport {PaginationContainer, PokemonListPageCSS} from \"../Styling/PagesCSS\";\nimport {Card, Grid, WhiteSpace, Pagination} from \"antd-mobile\";\nimport {gql, useQuery} from \"@apollo/client\";\nimport {Loading} from \"../Components/Loading\";\nimport {useHistory} from 'react-router-dom';\nimport {PokemonData} from '../Fixtures/PokemonData'\nconst ls = require('local-storage');\n\nconst GET_POKEMONS = gql`\n  query pokemons($limit: Int, $offset: Int) {\n    pokemons(limit: $limit, offset: $offset) {\n      count\n      results {\n        id\n        url\n        name\n        image\n      }\n    }\n  }\n`;\n\nconst limit = 12;\n\nconst locale = {\n    prevText: 'Prev',\n    nextText: 'Next',\n};\n\nexport const PokemonListPage =  () => {\n    const [offset, setOffset] = useState(0);\n    const [currentPage, setCurrentPage] = useState(1);\n    const ownedPokemon = ls.get('pokemonList') ? ls.get('pokemonList') : [{}];\n\n    const history = useHistory();\n\n    const handlePokemonClick =  (name) => {\n        history.push({\n            pathname: `/pokemon-detail/${name}`\n        });\n    }\n\n    const handlePaginationChange = (changePage) => {\n        setOffset(limit*(changePage-1));\n        setCurrentPage(changePage);\n    }\n\n    const { loading, error, data } = useQuery(GET_POKEMONS, {\n        variables: {limit, offset},\n    });\n\n    if (error) return `Error! ${error.message}`;\n\n    let pokemonData = PokemonData;\n\n    if(!loading) {\n        pokemonData = data.pokemons.results;\n\n        const modifiedPokemonData = pokemonData.map(object => ({\n            ...object, count: 0\n        }))\n\n        const tempResult = {};\n\n        for(let {name} of ownedPokemon){\n            tempResult[name] = {\n                name,\n                count: tempResult[name] ? tempResult[name].count+1 : 1\n            };\n        }\n\n        const ownedPokemonDataWithCount = (Object.values(tempResult));\n\n        modifiedPokemonData.map(item => {\n            ownedPokemonDataWithCount.map(ownedItem => {\n                if(item.name === ownedItem.name){\n                    item.count = ownedItem.count\n                }\n                return null;\n            })\n            return null;\n        });\n\n        pokemonData = modifiedPokemonData;\n    }\n\n    return (\n        <div>\n            <div css={PokemonListPageCSS}>\n                <div className='pokemon-list-title'>\n                    <WhiteSpace size='xl'/>\n                    <h2>POKEMON LIST</h2>\n                    <WhiteSpace size='xl'/>\n                </div>\n                <Card css={PaginationContainer}>\n                    <Card.Body>\n                        <div>\n                            {loading ? <Loading /> :\n                                <div className='grid-container'>\n                                    <Grid\n                                        data={pokemonData}\n                                        hasLine={false}\n                                        square={false}\n                                        columnNum={3}\n                                        renderItem={dataItem => (\n                                            <div className='content-container'>\n                                                <h5>{dataItem.name.toUpperCase()}</h5>\n                                                <img\n                                                    src={dataItem.image}\n                                                    alt=\"Pokemon\"\n                                                    style={{ height: '40%', verticalAlign: 'top'}}\n                                                    onClick={() => handlePokemonClick(dataItem.name)}\n                                                />\n                                                <h5 className='owned-amount'>OWNED AMOUNT: {dataItem.count}</h5>\n                                            </div>\n                                        )}\n                                    />\n                                </div>\n                            }\n                            <WhiteSpace size='xl'/>\n                            <WhiteSpace size='xl'/>\n                            <div className=\"pagination-container\" >\n                                <Pagination total={94} current={currentPage} locale={locale} onChange={handlePaginationChange}/>\n                            </div>\n                        </div>\n                    </Card.Body>\n                </Card>\n            </div>\n        </div>\n    );\n}","import {\n    BUG, DARK, DEFAULT, DRAGON, ELECTRIC, FAIRY,\n    FIGHTING, FIRE, FLYING, GHOST, GRASS, GROUND, ICE,\n    NORMAL, POISON, PSYCHIC, ROCK, STEEL, WATER\n} from '../Constants/Color';\nimport {css} from \"@emotion/react\";\n\nexport const checkType = (type) => {\n    switch (type){\n        case 'normal':\n            return NORMAL\n        case 'fighting':\n            return FIGHTING\n        case 'flying':\n            return FLYING\n        case 'poison':\n            return POISON\n        case 'ground':\n            return GROUND\n        case 'rock':\n            return ROCK\n        case 'bug':\n            return BUG\n        case 'ghost':\n            return GHOST\n        case 'steel':\n            return STEEL\n        case 'fire':\n            return FIRE\n        case 'water':\n            return WATER\n        case 'grass':\n            return GRASS\n        case 'electric':\n            return ELECTRIC\n        case 'psychic':\n            return PSYCHIC\n        case 'dragon':\n            return DRAGON\n        case 'dark':\n            return DARK\n        case 'fairy':\n            return FAIRY\n        case 'ice':\n            return ICE\n        default:\n            return DEFAULT\n    }\n}\n\nexport const checkBackgroundColor = (type) => {\n    const backgroundColor = checkType(type)\n\n    return css`\n        display: flex;\n        align-items: center;\n        background-color: ${backgroundColor};\n        width: 10vh;\n        min-width: 60px;\n        max-width: 250px;\n        margin-right: 1vw;\n        color: black;\n        max-width: 120px;\n        padding: 0;\n        text-align: center;\n        margin-right: 1vw;\n        display: inline-block;\n        font-size: 100%;\n        font-weight: bold;\n        border-style: none;\n        opacity: 1 !important;\n    `\n}\n\nexport const checkBackgroundColorPokedex = (type) => {\n    const backgroundColor = checkType(type)\n\n    return css`\n        background-color: ${backgroundColor};\n        width: 40%;\n        opacity: 1 !important;\n        margin-left: 5%;\n        margin-top: 5%;\n        color: white;\n        padding: 0;\n        text-align: center;\n        margin-right: 5%;\n        display: inline-block;\n        font-size: 1vh;\n        font-weight: bold;\n        border-style: none;\n    `\n}\n\nexport const FIRST_TEXT = 'YOU THROW A POKEBALL....';","/** @jsxImportSource @emotion/react */\n\nimport React, {useState} from 'react';\nimport {Button, Card, List, Modal, WhiteSpace, WingBlank} from \"antd-mobile\";\nimport {\n    HomePageCSS,\n    PokedexContainer,\n    TitleContainerCSS,\n    ReleaseConfirmationModalCSS\n} from '../Styling/PagesCSS'\nimport {checkBackgroundColorPokedex} from \"../Utils/Utils\";\nconst ls = require('local-storage')\n\nconst Item = List.Item;\n\nexport const PokedexPage = () => {\n    const [pokemonList, setPokemonList] = useState(ls.get('pokemonList'));\n    const [deletedPokemon, setDeletedPokemon] = useState({});\n    const [isConfirmationModalOpen, setIsConfirmationModalOpen] = useState(false);\n\n    const handleRelease = (pokemon) => {\n        setDeletedPokemon(pokemon);\n        setIsConfirmationModalOpen(true);\n    }\n    const handleCancelRelease = () => {\n        setIsConfirmationModalOpen(false);\n    }\n\n    const handleConfirmedRelease = () => {\n        const modifiedPokemon = pokemonList.filter(item => {\n            if(item.nickname !== deletedPokemon.nickname){\n                return item;\n            }\n            return null;\n        })\n        ls.set('pokemonList', modifiedPokemon);\n        setPokemonList(modifiedPokemon);\n        if(modifiedPokemon.length === 0){\n            ls.remove('pokemonList');\n            setPokemonList(ls.get('pokemonList'));\n        }\n        setIsConfirmationModalOpen(false);\n    }\n\n    return (\n        <div>\n            <div css={HomePageCSS}>\n                <div css={TitleContainerCSS}>\n                    <WhiteSpace size='xl'/>\n                    <h2>YOUR POKEDEX</h2>\n                    <WhiteSpace size='xl'/>\n                </div>\n                <WhiteSpace size=\"md\" />\n                <WhiteSpace size=\"md\" />\n                <WingBlank size='xl' css={PokedexContainer}>\n                    <div>\n                        {!(pokemonList) ?\n                            <div>\n                                <Card>\n                                    <div className='empty-container'>\n                                        <h3>YOUR POKEDEX IS EMPTY!</h3>\n                                    </div>\n                                </Card>\n                            </div> :\n                            <div>\n                                <Card>\n                                    <Card.Body>\n                                        <List>\n                                            <WhiteSpace size=\"md\" />\n                                            {pokemonList.map(item => (\n                                                <div className='pokedex-container'>\n                                                    <div className='am-card-header'>\n                                                        <h1 className='am-card-header-content'>\n                                                            {item.nickname.toUpperCase()}\n                                                        </h1>\n                                                    </div>\n                                                    <Item wrap={true}>\n                                                        <div className='pokedex-image'>\n                                                            <img src={item.image} alt={item.name}/>\n                                                            <div className='pokedex-types'>\n                                                                {\n                                                                    item.types.map(index => (\n                                                                        <Button disabled size='small' css={checkBackgroundColorPokedex(index.type.name)}>\n                                                                            <p>\n                                                                                {index.type.name.toUpperCase()}\n                                                                            </p>\n                                                                        </Button>\n                                                                    ))\n                                                                }\n                                                            </div>\n                                                        </div>\n                                                        <div className='pokedex-info-container'>\n                                                            <div className='pokedex-info'>\n                                                                <div className='pokedex-info-left'>\n                                                                    <h4>POKEMON</h4>\n                                                                    <h4>LEVEL</h4>\n                                                                    <h4>WEIGHT</h4>\n                                                                    <h4>HEIGHT</h4>\n                                                                    <h4>ABILITIES</h4>\n                                                                </div>\n                                                                <div className='pokedex-info-right'>\n                                                                    <h4>: {item.name.toUpperCase()}</h4>\n                                                                    <h4>: {item.level}</h4>\n                                                                    <h4>: {item.weight}KG</h4>\n                                                                    <h4>: {item.height}M</h4>\n                                                                    <h4>:</h4>\n                                                                </div>\n                                                                <div className='abilities-container-title'>\n                                                                </div>\n                                                            </div>\n                                                            <div className='abilities-container'>\n                                                                {\n                                                                    item.abilities.map(index => (\n                                                                        <Button disabled className='abilities-button' size='small'>\n                                                                            <p>{index.ability.name.toUpperCase()}</p>\n                                                                        </Button>\n                                                                    ))\n                                                                }\n                                                            </div>\n                                                        </div>\n                                                        <div className='pokedex-release-button'>\n                                                            <Button size='small' type='warning' onClick={() => handleRelease(item)}>\n                                                                <p>RELEASE</p>\n                                                            </Button>\n                                                        </div>\n                                                    </Item>\n                                                    <Modal\n                                                        visible={isConfirmationModalOpen}\n                                                        css={ReleaseConfirmationModalCSS}\n                                                        transparent\n                                                    >\n                                                        <div className='confirmation-modal-container'>\n                                                            <div className='confirmation-modal-text'>\n                                                                <h2>ARE YOU SURE? THIS WILL RELEASE YOUR POKEMON INTO THE WILD!</h2>\n                                                            </div>\n                                                            <WhiteSpace size='md'/>\n                                                            <div className='button-container'>\n                                                                <Button onClick={() => handleConfirmedRelease()}>YES</Button>\n                                                                <Button onClick={() => handleCancelRelease()}>NO</Button>\n                                                            </div>\n                                                        </div>\n                                                    </Modal>\n                                                </div>\n                                            ))}\n                                        </List>\n                                    </Card.Body>\n                                </Card>\n                            </div>\n                        }\n                    </div>\n                </WingBlank>\n            </div>\n        </div>\n    );\n}\n","/** @jsxImportSource @emotion/react */\n\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport {Button, WhiteSpace} from \"antd-mobile\";\nimport {Input} from \"antd\";\nimport {NicknameFormCSS} from \"../Styling/ComponentCSS\";\nconst ls = require('local-storage');\n\nexport const NameForm = ({setVisible, pokemon}) => {\n    const pokedex = ls.get('pokemonList');\n    const temp = pokedex ? pokedex : [];\n\n    const formik = useFormik({\n        initialValues: {\n            nickname: '',\n        },\n        onSubmit: values => {\n            const newPokemon = {\n                name: pokemon.name,\n                image: pokemon.sprites.front_default,\n                level: Math.floor((Math.random() * 100) + 1),\n                nickname: values.nickname,\n                types: pokemon.types,\n                height: pokemon.height,\n                weight: pokemon.weight,\n                abilities: pokemon.abilities\n            }\n            temp.push(newPokemon);\n            ls.set('pokemonList', temp);\n            setVisible(false);\n        },\n        validate: values => {\n            const errors = {};\n            const truth = temp.some(item =>  item.nickname === values.nickname);\n            if(truth){\n                errors.nickname = 'Nickname already taken';\n            }\n            if(!values.nickname){\n                errors.nickname = 'Nickname is needed';\n            }\n            if(values.nickname.length > 15){\n                errors.nickname = 'Nickname is more than 15 characters';\n            }\n            if(values.nickname.length < 3){\n                errors.nickname = 'Nickname is less than 3 characters';\n            }\n            return errors;\n        }\n    });\n    return (\n        <div css={NicknameFormCSS}>\n            <WhiteSpace size='xl'/>\n            <h4>GIVE IT A UNIQUE NICKNAME!</h4>\n            <WhiteSpace size='md'/>\n            <form onSubmit={formik.handleSubmit}>\n                <div className='form-container'>\n                    <div className='input-container'>\n                        <Input\n                            className='input-nickname'\n                            placeholder='Nickname'\n                            id=\"nickname\"\n                            name=\"nickname\"\n                            type=\"text\"\n                            onChange={formik.handleChange}\n                            value={formik.values.nickname}\n                            size='100000'\n                        />\n                    </div>\n                    <div className='input-submit-container'>\n                        <Button size='small' className='submit-button' onClick={formik.handleSubmit}>\n                            <p>\n                                SUBMIT\n                            </p>\n                        </Button>\n                    </div>\n                </div>\n                {\n                    formik.touched.nickname && formik.errors.nickname\n                        ?\n                        <div className='error-message'>\n                            {formik.errors.nickname}\n                        </div>\n                        :\n                        null\n                }\n            </form>\n            <WhiteSpace size='xl'/>\n        </div>\n    );\n};\n","/** @jsxImportSource @emotion/react */\n\nimport React from 'react';\nimport {Button, Modal, WhiteSpace} from 'antd-mobile';\nimport 'antd/es/spin/style/css';\nimport {NameForm} from './NameForm';\nimport {ModalCSS} from \"../Styling/PagesCSS\";\nimport {FIRST_TEXT} from \"../Utils/Utils\";\n\nexport const CatchModal =  ({visible, setVisible, pokemon, catchChance, setChance, isLoading, setIsLoading, loadingText, setLoadingText, handleLoading}) => {\n\n    const handleOnClose = () => {\n        setVisible(false);\n        setIsLoading(true);\n        setLoadingText(FIRST_TEXT);\n    }\n\n    const handleChance = (chance) => {\n        return chance <= 50;\n    }\n\n    const handleThrow = () => {\n        setLoadingText(FIRST_TEXT);\n        setTimeout(() => {\n            setIsLoading(false);\n        }, 4000);\n        handleLoading();\n    }\n\n    const handleRetry = () => {\n        setLoadingText(FIRST_TEXT);\n        setIsLoading(true);\n        setChance(Math.floor((Math.random() * 50) + 1));\n        handleThrow();\n    }\n    return (\n        <div>\n            <Modal\n                visible={visible}\n                markClosable={true}\n                transparent\n                afterClose={() => handleOnClose()}\n                css={ModalCSS}\n            >\n                {isLoading ?\n                    <div>\n                        <div className='loading-catch-text'>\n                            <WhiteSpace size='sm'/>\n                            <h1>{loadingText}</h1>\n                        </div>\n                    </div>\n                    :\n                    <div>\n                        {\n                            handleChance(catchChance)\n                                ?\n                                <div className='successful-catch-container'>\n                                    <div>\n                                        <h2>CONGRATULATIONS!</h2>\n                                    </div>\n                                    <div>\n                                        <img src={pokemon.sprites.front_default} className='pokemon-image' alt={pokemon.name}/>\n                                    </div>\n                                    <WhiteSpace size='md'/>\n                                    <div>\n                                        <h3>GOTCHA!</h3>\n                                        <h3>{pokemon.name.toUpperCase()} WAS CAUGHT!</h3>\n                                    </div>\n                                    <WhiteSpace size='md'/>\n                                    <NameForm setVisible={setVisible} pokemon={pokemon}/>\n                                </div>\n                                :\n                                <div className='failed-catch-container'>\n                                    <div className='failed-catch-text'>\n                                        <h1>OH NO, THE POKEMON BROKE FREE!</h1>\n                                    </div>\n                                    <WhiteSpace size='md'/>\n                                    <div className='button-container'>\n                                        <Button onClick={handleRetry}>Retry</Button>\n                                        <Button onClick={handleOnClose}>Close</Button>\n                                    </div>\n                                </div>\n                        }\n                    </div>\n                }\n            </Modal>\n        </div>\n    );\n}","/** @jsxImportSource @emotion/react */\n\nimport React, {useState} from 'react';\nimport {Card, WingBlank, WhiteSpace, Button, Accordion} from \"antd-mobile\";\nimport {PokemonCardsCSS, PokemonDetailPageCSS} from '../Styling/PagesCSS'\nimport {gql, useQuery} from \"@apollo/client\";\nimport {checkBackgroundColor, FIRST_TEXT} from '../Utils/Utils';\nimport {Loading} from \"../Components/Loading\";\nimport {CatchModal} from \"../Components/CatchModal\";\nimport {DetailedPokemonData} from \"../Fixtures/PokemonData\";\n\nconst GET_POKEMONS_DETAIL = gql`\n  query pokemon($name: String!) {\n  pokemon(name: $name) {\n    id\n    name\n    abilities {\n      ability {\n        name\n      }\n    }\n    abilities {\n      ability {\n        name\n      }\n    }\n    moves {\n      move {\n        name\n      }\n    }\n    types {\n      type {\n        name\n      }\n    }\n    sprites {\n        front_default\n    }\n    height\n    weight\n  }\n}\n`;\n\nexport const PokemonDetailPage = () => {\n    const [isCatchModalVisible, setIsCatchModalVisible] = useState(false);\n    const [loadingText, setLoadingText] = useState(FIRST_TEXT);\n    const [isLoading, setIsLoading] = useState(true);\n    const [chance, setChance] = useState(0);\n\n\n    const pokemonName = (window.location.href).substring((window.location.href).lastIndexOf('/')+1);\n\n    const { loading, error, data } = useQuery(GET_POKEMONS_DETAIL, {\n        variables: {name: pokemonName}\n    });\n\n    let pokemonData = DetailedPokemonData\n\n    if (!loading) {\n        pokemonData = data.pokemon\n        if(pokemonData.name === null){\n            pokemonData = DetailedPokemonData;\n        }\n    }\n\n    if (error) return `Error! ${error.message}`;\n    const handleLoading = () => {\n        setTimeout(() => {\n            setIsLoading(false);\n        }, 4000);\n        setTimeout(() => {\n            setLoadingText('THE BALL IS SHAKING....');\n        }, 1000);\n        setTimeout(() => {\n            setLoadingText('IS IT GOING TO BE IT?....');\n        }, 2000);\n        setTimeout(() => {\n            setLoadingText('THE BALL IS SETTLING....');\n        }, 3000);\n    }\n\n    const handlePokemonClick = () => {\n        setChance(Math.floor((Math.random() * 50) + 1));\n        handleLoading();\n        setIsCatchModalVisible(true);\n    }\n    return (\n        <div>\n            <div css={PokemonDetailPageCSS}>\n                <div className='pokemon-list-title'>\n                    <WhiteSpace size='xl'/>\n                    <h2>POKEMON DETAIL</h2>\n                    <WhiteSpace size='xl'/>\n                </div>\n                <WhiteSpace size=\"xl\" />\n                <WhiteSpace size=\"md\" />\n                <WhiteSpace size=\"md\" />\n                <WingBlank size='xl' css={PokemonCardsCSS}>\n                    {\n                        loading ?\n                            <div  style={{minHeight: '50vh'}}>\n                                <Loading/>\n                            </div>\n                            :\n                            <div>\n                                {pokemonData.gender  ?\n                                    <div>\n                                        <Card>\n                                            <div className='empty-container'>\n                                                <h3>POKEMON NOT FOUND!</h3>\n                                            </div>\n                                        </Card>\n                                    </div>\n                                    :\n                                    <Card>\n                                        <div className='card-container'>\n                                            <WhiteSpace size='xl'/>\n                                            <WhiteSpace size='xl'/>\n                                            <div className='am-card-header'>\n                                                <h3 className='am-card-header-content'>\n                                                    POKEMON\n                                                </h3>\n                                            </div>\n                                            <Card.Body>\n                                                <div>\n                                                    <WhiteSpace size='sm'/>\n                                                    <h3 className='pokemon-name'>{(pokemonData.name).toUpperCase()}</h3>\n                                                    <div className='pokemon-image-container'>\n                                                        <img src={pokemonData.sprites.front_default} alt={pokemonData.name} className='pokemon-image'/>\n                                                    </div>\n                                                    <div className='pokemon-detail-container'>\n                                                        <WhiteSpace size='md'/>\n                                                        <h4 className='subtitle'>TYPES</h4>\n                                                        <WhiteSpace size='md'/>\n                                                        <div className='pokemon-detail-type-container'>\n                                                            {\n                                                                pokemonData.types.map(index => (\n                                                                    <Button css={checkBackgroundColor(index.type.name)} disabled>\n                                                                        <p>{index.type.name.toUpperCase()}</p>\n                                                                    </Button>\n                                                                ))\n                                                            }\n                                                        </div>\n                                                        <WhiteSpace size='md'/>\n                                                        <WhiteSpace size='md'/>\n                                                        <Accordion>\n                                                            <Accordion.Panel header='ABILITIES' className='accordion-content'>\n                                                                {\n                                                                    pokemonData.abilities.map(index => (\n                                                                        <Button disabled size='small' className='move-container'>\n                                                                            <p>{index.ability.name.toUpperCase()}</p>\n                                                                        </Button>\n                                                                    ))\n                                                                }\n                                                            </Accordion.Panel>\n                                                            <WhiteSpace size='xl'/>\n                                                            <Accordion.Panel header='MOVES' className='accordion-content'>\n                                                                {\n                                                                    pokemonData.moves.map(index => (\n                                                                        <Button disabled className='move-container' size='small'>\n                                                                            <p>{index.move.name.toUpperCase()}</p>\n                                                                        </Button>\n                                                                    ))\n                                                                }\n                                                            </Accordion.Panel>\n                                                        </Accordion>\n                                                        <WhiteSpace size='md'/>\n                                                        <CatchModal\n                                                            visible={isCatchModalVisible}\n                                                            setVisible={setIsCatchModalVisible}\n                                                            loadingText={loadingText}\n                                                            setLoadingText={setLoadingText}\n                                                            pokemon={pokemonData}\n                                                            catchChance={chance}\n                                                            setChance={setChance}\n                                                            isLoading={isLoading}\n                                                            setIsLoading={setIsLoading}\n                                                            handleLoading={handleLoading}\n                                                        />\n                                                        <WhiteSpace size='sm'/>\n                                                        <div className='catch-pokemon-button-container'>\n                                                            <Button className='catch-pokemon-button' size='large' onClick={handlePokemonClick}>THROW POKEBALL</Button>\n                                                        </div>\n                                                        <WhiteSpace size='xl'/>\n                                                        <WhiteSpace size='xl'/>\n                                                    </div>\n                                                </div>\n                                            </Card.Body>\n                                        </div>\n                                    </Card>\n                                }\n\n                            </div>\n                    }\n                </WingBlank>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport {Card} from 'antd-mobile';\nimport {useHistory} from 'react-router-dom';\n\nexport const Error =  (message) => {\n    const history = useHistory();\n    return (\n        <div>\n            <Card title='Error'>\n                <p>Oops! {message}</p>\n                {setTimeout(() => {history.push('/')}, 3000)}\n            </Card>\n        </div>\n    );\n}","/** @jsxImportSource @emotion/react */\n\nimport {ContainerGithubCSS,ContainerPokeballCSS, TopBarCSS, NavigationButtonCSS} from '../Styling/ComponentCSS';\nimport { useHistory } from 'react-router-dom'\nimport React from \"react\";\n\nexport const TopBar = () => {\n    const history = useHistory();\n\n    const handlePokeballClick =  () => {\n        history.push('/');\n    }\n\n    const handleListClick =  () => {\n        history.push('/pokemon-list');\n    }\n\n    const handlePokedexClick = () => {\n        history.push('/pokedex');\n    }\n\n    const handleHomeClick = () => {\n        history.push('/');\n    }\n\n    return(\n        <div css={TopBarCSS}>\n            <div css={ContainerPokeballCSS}>\n                <a onClick={handlePokeballClick}><img src='/images/PinClipart.com_pokeball-clip-art_843046.png' alt='PokeBall' width='170px'/></a>\n                <h2>GOTTA CATCH 'EM ALL!</h2>\n            </div>\n            <div css={ContainerGithubCSS}>\n                <a target=\"_blank\" href='https://github.com/AldiPrayogi/poke-tokopedia' rel='noreferrer'>GitHub</a>\n            </div>\n                <div css={NavigationButtonCSS}>\n                    <a onClick={handleListClick}>Pokemon List</a>\n                </div>\n                <div css={NavigationButtonCSS}>\n                    <a onClick={handleHomeClick} style={{margin: \"2vw\"}}>Home</a>\n                </div>\n                <div css={NavigationButtonCSS}>\n                    <a onClick={handlePokedexClick}>Your Pokedex</a>\n                </div>\n        </div>\n    );\n}\n\n","/** @jsxImportSource @emotion/react */\n\nimport React from 'react';\nimport {HomePage} from \"./Pages/HomePage\";\nimport {Route, Switch} from 'react-router-dom';\nimport {PokemonListPage} from \"./Pages/PokemonListPage\";\nimport {PokedexPage} from \"./Pages/PokedexPage\";\nimport {PokemonDetailPage} from \"./Pages/PokemonDetailPage\";\nimport {Error} from './Components/Error';\nimport {TopBar} from \"./Components/TopBar\";\n\nfunction App() {\n    return(\n      <div>\n          <TopBar />\n          <Switch>\n              <Route exact path='/' component={HomePage} />\n\n              <Route path='/pokemon-list' component={PokemonListPage}/>\n\n              <Route path='/pokedex' component={PokedexPage}/>\n\n              <Route path='/pokemon-detail/:name' component={PokemonDetailPage} />\n              <Route path='/err' component={Error}/>\n          </Switch>\n      </div>\n\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport {HashRouter} from 'react-router-dom';\n\nexport const client = new ApolloClient({\n    uri: 'https://graphql-pokeapi.vercel.app/api/graphql',\n    cache: new InMemoryCache()\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}